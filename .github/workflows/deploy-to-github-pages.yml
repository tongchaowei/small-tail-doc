# 需要注意的是:
# 使用 GitHub Actions 部署到 GitHub Pages, 需要在 GitHub 仓库的 Settings -> Pages 中
# 将 Build and deployment 下的 Source 设为使用 GitHub Actions 进行部署, 即将 GitHub
# Pages 的构建和部署源设置为 GitHub Actions。

# 此文件中工作流的名称
name: 部署 Small Tail Doc

# 此工作流的执行时机，即什么时候执行此工作流
# 当向 main 分支推送代码时，触发执行此工作流
on:
  push:
    branches:
      - github-page
  # 允许我们在 GitHub 仓库的 Actions 选项卡中手动触发允许此工作流
  workflow_dispatch:

# 设置此工作流对于所在的 GitHub 仓库的操作权限，即允许此工作流对所在的仓库进行哪些操作
# 文档：https://docs.github.com/zh/actions/writing-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  # 允许此工作流读取仓库的源代码和写入
  contents: read
  # 允许此工作流在 GitHub Packages 上上传和发布包
  packages: write
  # 允许此工作流获取 OpenID Connect (OIDC) 令牌,
  # 在 actions/deploy-pages 将打包的文档页面部署到 GitHub Pages 时需要此权限
  # 相关文档: https://github.com/actions/deploy-pages?tab=readme-ov-file#security-considerations
  id-token: write
  # 允许此工作流使用 GitHub Pages, 在 GitHub Pages 上部署页面
  # 在 actions/deploy-pages 将打包的文档页面部署到 GitHub Pages 时需要此权限
  # 相关文档: https://github.com/actions/deploy-pages?tab=readme-ov-file#security-considerations
  pages: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

# 定义此工作流中的工作任务步骤
jobs:
  # 对项目中的小尾巴通用库文档项目进行打包构建
  build:
    # 为作业设置名称
    name: 构建文档项目
    # 指定此工作任务在什么操作系统环境上运行
    # 操作系统环境中内置的代码运行环境: https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories
    runs-on: ubuntu-latest
    # 此工作任务的步骤，即指定工作中每一步要做什么
    steps:
      - name: 将代码复制到当前工作任务运行的操作系统环境中
        # 可以理解为使用 GitHub 提供的上已经写好的工作流，将代码复制到当前运行的操作系统环境中
        uses: actions/checkout@v4
      - name: 配置 Node 环境
        # 配置 Node 环境的工作流，为项目构建的配置 Node 环境
        uses: actions/setup-node@v3
        # 向 uses 指令中指定的工作流传递参数
        with:
          node-version: 18
      - name: 配置 GitHub Pages
        # 配置 GitHub Pages 的工作流
        # 该工作流可以用于启用页面并提取有关网站的各种元数据
        uses: actions/configure-pages@v5
        # 由于 GitHub 提供的 ubuntu-latest 操作系统环境中并没有内置 pnpm，因此需要手动安装
      - name: 安装包管理工具 pnpm
        run: npm install -g pnpm
        # 打包构建文档项目
      - name: 构建文档项目
        run: pnpm i && pnpm docs:build
      - name: 上传文档项目的构建结果到 GitHub Pages
        # 该 actions 的作用是将可以打包和上传部署到 GitHub Pages 的工件上传到 GitHub Pages
        uses: actions/upload-pages-artifact@v3
        # 向 uses 指令中指定的工作流传递参数, 需要上传什么目录下的文件到 GitHub Pages
        with:
          path: docs/.vuepress/dist
  # 在 GitHub Pages 上部署文档项目的构建结果
  deploy:
    name: 部署文档项目
    # 定义此工作任务中会使用到的环境变量
    # 文档: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idenvironment
    environment:
      name: github-pages
      # 定义环境变量 `url`, 该环境变量的值为从此工作任务的上下文对象 steps 中获取
      # steps: 含有当前作业中已指定 id 且已运行的步骤的信息
      # deployment: 此工作任务中 steps 配置项中工作步骤的 id
      # outputs: 此工作任务中 steps 配置项中指定 id 工作步骤的输出
      # page_url: actions/deploy-pages 输出的已部署 GitHub Pages 站点的 URL
      # steps 上下文对象文档: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#steps-context
      # 获取上下文对象中数据的语法: https://docs.github.com/en/actions/sharing-automations/creating-actions/metadata-syntax-for-github-actions#about-yaml-syntax-for-github-actions
      # actions/deploy-pages 输出的相关文档: https://github.com/actions/deploy-pages?tab=readme-ov-file#outputs-
      url: ${{ steps.deployment.outputs.page_url }}
    # 指明当前工作任务需要在哪些工作任务完成后才能运行
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 部署文档项目到 GitHub Pages
        # 工作步骤的唯一标识符
        id: deployment
        uses: actions/deploy-pages@v4
